let mediaRecorder = null;
let audioChunks = [];

console.log("offscren.js —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === "start_recording") {
        startRecording(message);
    } else if (message.type === "stop_recording") {
        stopRecording(message);
    }
});

// –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
async function startRecording(message) {
    if (!mediaRecorder || mediaRecorder.state === "inactive") {
        let save_path = message.save_path || "tab_audio.webm";

        chrome.tabCapture.capture({ audio: true, video: false }, (stream) => {
            if (!stream) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∞—É–¥–∏–æ –≤–∫–ª–∞–¥–∫–∏.");
                return;
            }

            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                if (event.data && event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = () => {
                let blob = new Blob(audioChunks, { type: "audio/webm" });
                let url = URL.createObjectURL(blob);
                chrome.downloads.download({
                    url: url,
                    filename: save_path
                }, (downloadId) => {
                    console.log(`–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω (downloadId: ${downloadId}).`);
                });
            };

            mediaRecorder.start();
            console.log(`üî¥ –ë–æ—Ç ${botId} –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ${save_path}).`);
        });
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
async function stopRecording(message) {
    if (mediaRecorder && mediaRecorder.state !== "inactive") {
        mediaRecorder.stop();
        console.log(`üõë –ë–æ—Ç ${botId} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–ø–∏—Å—å.`);
    }
}