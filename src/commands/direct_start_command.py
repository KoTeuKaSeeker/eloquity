from typing import List, Dict
from src.commands.command_interface import CommandInterface
from src.chat_api.chat.chat_interface import ChatInterface
from src.chat_api.message_handler import MessageHandler
from src.chat_api.message_filters.interfaces.message_filter_factory_interface import MessageFilterFactoryInterface
import re

class DirectStartCommand(CommandInterface):
    direction_states: dict[str, str]
    
    def __init__(self, filter_factory: MessageFilterFactoryInterface, direction_states: dict[str, str]):
        self.filter_factory = filter_factory
        self.direction_states = direction_states
    
    async def select_bot_message(self, context: dict, chat: ChatInterface):
        model_names = list(self.direction_states.keys())
        model_names_str = "\n".join([f"{i + 1}. {name}" for i, name in enumerate(model_names)])
        await chat.send_message_to_query(f"üíé –í—ã–±–∏—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n{model_names_str}")    
        return chat.move_next(context, "select_bot_state")

    async def handle_command(self, message: dict, context: dict, chat: ChatInterface):
        if "model_name" in context["user_data"]:
            model_name = context["user_data"]["model_name"]
            await chat.send_message_to_query(f"–ü—Ä–∏–≤–µ—Ç üëã. –ë–æ—Ç {model_name} –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é üòâ!")
            
            state = self.direction_states[model_name]
            return chat.move_next(context, state)
        else:
            return await self.select_bot_message(context, chat)
    
    async def message_to_write_start(self, message: dict, context: dict, chat: ChatInterface):
        model_name = None
        if "model_name" in context["user_data"]: 
            model_name = context["user_data"]["model_name"]
            await chat.send_message_to_query(f"‚èÆÔ∏è –í—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ {model_name}. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å {model_name}, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return chat.stay_on_state(context)
        else:
            return await self.select_bot_message(context, chat)
    
    async def select_bot_command(self, message: dict, context: dict, chat: ChatInterface):
        model_id = int(re.findall(r"\d+", message["text"])[0]) - 1

        model_names = list(self.direction_states.keys())
        if  model_id < 0 or model_id >= len(model_names):
            model_names_str = "\n".join([f"{i + 1}. {name}" for i, name in enumerate(model_names)])
            await chat.send_message_to_query(f"üéÉ –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏. –í—ã–±–∏—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n{model_names_str}")
            return chat.stay_on_state(context)

        model_name = list(self.direction_states.keys())[model_id]
        context["user_data"]["model_name"] = model_name

        await chat.send_message_to_query(f"üîñ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç–∞ {model_id + 1}. {model_name}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\nüîé –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –±–æ—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /change_bot.")

        return chat.move_back(context)

    async def change_bot_command(self, message: dict, context: dict, chat: ChatInterface):
        return await self.select_bot_message(context, chat)

    async def wrong_select_bot_text(self, message: dict, context: dict, chat: ChatInterface):
        model_names = list(self.direction_states.keys())
        model_names_str = "\n".join([f"{i + 1}. {name}" for i, name in enumerate(model_names)])
        await chat.send_message_to_query(f"‚èÆÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –±–æ—Ç–∞. –í—ã–±–∏—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n{model_names_str}")
        return chat.stay_on_state(context)
    
    def get_conversation_states(self) -> Dict[str, MessageHandler]:
        return {
            "entry_point": [
                MessageHandler(self.filter_factory.create_filter("command", dict(command="start")), self.handle_command),
                MessageHandler(self.filter_factory.create_filter("command", dict(command="change_bot")), self.change_bot_command),
                MessageHandler(self.filter_factory.create_filter("all"), self.message_to_write_start)
            ],
            "select_bot_state": [
                MessageHandler(self.filter_factory.create_filter("regex", dict(pattern=r"\d+")), self.select_bot_command),
                MessageHandler(self.filter_factory.create_filter("all"), self.wrong_select_bot_text)
            ]
        }