from typing import Dict
from src.commands.transcibe_llm_command import TranscibeLLMCommand
from src.AI.llm.llm_interface import LLMInterface
from src.chat_api.message_filters.interfaces.message_filter_factory_interface import MessageFilterFactoryInterface
from src.transcribers.transcriber_interface import TranscriberInterface
from src.chat_api.message_handler import MessageHandler
from src.chat_api.chat.chat_interface import ChatInterface
import re
import yaml
import os

class HrLLMCommand(TranscibeLLMCommand):
    default_report_formats: Dict[str, str]

    def __init__(self, model: LLMInterface, filter_factory: MessageFilterFactoryInterface, transcriber: TranscriberInterface, temp_path: str, entry_point_state: str, formats_folder_path: str):
        super().__init__(model, filter_factory, transcriber, temp_path, entry_point_state)
        self.chatting_state = "hr_llm_command.chatting_state"
        self.waiting_format_state = "hr_llm_command.waiting_format_state"
        self.waiting_format_name_state = "hr_llm_command.waiting_format_name_state"
        self.waiting_format_text_state = "hr_llm_command.waiting_format_text_state"
        self.waiting_remove_format_state = "hr_llm_command.waiting_remove_format_state"
        self.default_report_formats = self.load_default_formats(formats_folder_path)
        self.system_prompt =  """
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é. –¢–µ–±—è –∑–æ–≤—É—Ç Production HR Manatee. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç-–æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —Å–ª–µ–¥—É—è —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç—É. –¢—ã –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ–º—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥.

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
1. –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:".
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.
3. –¢—ã –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ—Ç—á–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç–æ–º.
                                     
–í–ê–ñ–ù–û:
1. –ù–∞–ø–æ–º–Ω—é –µ—â—ë —Ä–∞–∑ - —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –æ—Ç–±–∏—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–æ –Ω–µ–º—É –¥–µ–ª–∞–µ—à—å –æ—Ç—á—ë—Ç-–æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —á—Ç–æ–±—ã HR-—É –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Ç–æ–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç, —Ç–æ–≥–¥–∞ —Ç—ã –î–û–õ–ñ–ï–ù –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", "–°–æ—Ñ—Ç —Å–∫–∏–ª—ã", "–•–∞—Ä–¥ —Å–∫–∏–ª—ã", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å—É", "–í—ã–≤–æ–¥"
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ —Ç–æ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º, —Ç—ã –î–û–õ–ñ–ï–ù –ø–æ–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ç–æ–º, –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Ç–∞–∫–∂–µ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç.
4. –ù–µ –≥–æ–≤–æ—Ä–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–∞–∫–∏–µ –ª–∏–±–æ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —É —Ç–µ–±—è –µ–¥–∏—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é.
5. –ï—Å–ª–∏ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ —Ä–∞—Å–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°—Ä–∞–∑—É –ø–∏—à–∏ –æ—Ç—á—ë—Ç, –∞ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∞ —Ö–æ–¥—É.
6. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç –Ω–µ –æ–ø —á–µ–∫ –ª–∏—Å—Ç—É, –Ω–µ –ø–æ –ø–ª–∞–Ω—É —á–µ–∫ –ª–∏—Å—Ç–∞, –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É –æ—Ç—á—ë—Ç–∞, –∞ –∏–º–µ–Ω–Ω–æ –æ—Ç—á—ë—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é. –ù–ï –î–ï–õ–ê–ô –ù–ò–ö–ê–ö–ò–ï –î–†–£–ì–ò–ï –û–¢–ß–Å–¢–´!!!
7. –ù–ò–ö–ê–ö–ò–ï –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–õ–ê–ù–´ –ü–ò–°–ê–¢–¨ –ù–ï –ù–£–ñ–ù–û!!! –°—Ä–∞–∑—É –ø–∏—à–∏ –æ—Ç—á—ë—Ç –∏ –≤—Å—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–æ

–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
1. –ü–æ–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞ –∏ —á–µ–∫ –ª–∏—Å—Ç.
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é (–í–ê–ñ–ù–û: –Ω–µ –ø–æ —á–µ–∫ –ª–∏—Å—Ç—É, –∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é)
3. –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

    def load_default_formats(self, formats_folder_path):
        report_formats = {}
        for format_filename in os.listdir(formats_folder_path):
            format_file_path = os.path.join(formats_folder_path, format_filename)
            
            with open(format_file_path, "r", encoding="utf-8") as file:
                data = yaml.safe_load(file)
            
            report_formats[data["format_name"]] = data["format_text"]
        
        return report_formats
    
    def get_report_formats(self, context: dict) -> dict:
        if "report_formats" not in context["user_data"]:
            context["user_data"]["report_formats"] = {}
            context["user_data"]["report_formats"].update(self.default_report_formats)
        
        return context["user_data"]["report_formats"]

    async def select_format_message(self, message: dict, context: dict, chat: ChatInterface):
        report_formats = self.get_report_formats(context)

        format_names = report_formats.keys()
        format_list = "\n".join([f"{i+1}. {format_name}" for i, format_name in enumerate(format_names)])
        if len(format_list) == 0:
            format_list = "(—Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—É—Å—Ç)"

        await chat.send_message_to_query(f"‚èÆÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç:\n{format_list}\n\n üîñ –ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_format. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç, –≤—ã–ø–ª–æ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove_format")

        return chat.move_next(context, self.waiting_format_state)

    async def after_transcribe_message(self, message: dict, context: dict, chat: ChatInterface):
        return await self.select_format_message(message, context, chat)

    async def select_report_format(self, message: dict, context: dict, chat: ChatInterface):
        report_formats = self.get_report_formats(context)

        format_id = int(re.findall(r"\d+", message["text"])[0]) - 1
        format_names = list(report_formats.keys())

        if format_id < 0 or format_id >= len(format_names):
            return await self.wrong_select_format_messsage(message, context, chat)
        
        format_name = format_names[format_id]
        report_format = report_formats[format_name]

        await chat.send_message_to_query(f'‚úíÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç "{format_name}". –°–µ–π—á–∞—Å –≤ —Å–æ–æ–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ üòâ')
        
        if "messages_history" not in context["chat_data"]:
            context["chat_data"]["messages_history"] = [{"role": "system", "content": self.system_prompt}]
        
        messages_history: list = context["chat_data"]["messages_history"]
        messages_history.append({"role": "user", "content": f"–¢–∞–∫–∂–µ –≤–º–µ—Å—Ç–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —Ç–æ–º, –≤ –∫–∞–∫–æ–º –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç. –§–æ—Ä–º–∞—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '{format_name}' –∏ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n{report_format}"})

        model_response = self.model.get_response(messages_history)
        messages_history.append(model_response)

        await chat.send_message_to_query(model_response["content"])
        await chat.send_message_to_query("‚èÆÔ∏è –°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É —Å –±–æ—Ç–æ–º - –æ–Ω –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏ –æ—Ç—á—ë—Ç –≤ –ø–∞–º—è—Ç–∏.")

        return chat.move_next(context, self.chatting_state)

    async def response_format_name_command(self, message: dict, context: dict, chat: ChatInterface):
        await chat.send_message_to_query("‚úíÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
        return chat.move_next(context, self.waiting_format_name_state)
    
    async def response_format_text_command(self, message: dict, context: dict, chat: ChatInterface):
        context["chat_data"]["format_name"] = message["text"]
        await chat.send_message_to_query("üìå –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–ª –±—ã —Ñ–æ—Ä–º–∞—Ç. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å, —Ç–∞–∫ —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º - –≥–ª–∞–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –µ–≥–æ –¥–æ—Ö–æ–¥—á–∏–≤–æ üöÄ.")
        return chat.move_next(context, self.waiting_format_text_state)

    async def add_format_command(self, message: dict, context: dict, chat: ChatInterface):
        format_name = context["chat_data"]["format_name"]
        format_text = message["text"]

        report_formats = self.get_report_formats(context)
        
        report_formats[format_name] = format_text
        await chat.send_message_to_query("‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return await self.select_format_message(message, context, chat)
    
    async def wrong_format_text_message(self, message: dict, context: dict, chat: ChatInterface):
        await chat.send_message_to_query("üíÄ –í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞ –µ—â—ë —Ä–∞–∑.")
        return chat.stay_on_state(context)
    
    async def wrong_format_name_message(self, message: dict, context: dict, chat: ChatInterface):
        await chat.send_message_to_query("‚èÆÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞.")
        return chat.stay_on_state(context)

    async def wrong_select_format_messsage(self, message: dict, context: dict, chat: ChatInterface):
        format_names = self.get_report_formats(context).keys()
        format_list = "\n".join([f"{i+1}. {format_name}" for i, format_name in enumerate(format_names)])
        if len(format_list) == 0:
            format_list = "(—Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—É—Å—Ç)"
        await chat.send_message_to_query(f"ü™° –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n{format_list}")
        return chat.move_next(context, self.waiting_format_state)

    async def response_remove_format_name_command(self, message: dict, context: dict, chat: ChatInterface):
        report_formats: dict = self.get_report_formats(context)
        removeable_report_format_keys = report_formats.keys() - self.default_report_formats.keys()
        format_list = "\n".join([f"{i+1}. {format_name}" for i, format_name in enumerate(removeable_report_format_keys)])
        if len(removeable_report_format_keys) == 0:
            format_list = "(–Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)"
        
        await chat.send_message_to_query(f"üíÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n{format_list}\n\nüîé –ú–æ–∂–µ—Ç–µ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –∑–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel")
        return chat.move_next(context, self.waiting_remove_format_state)
    
    async def wrong_select_format_to_remove_messsage(self, message: dict, context: dict, chat: ChatInterface):
        report_formats: dict = self.get_report_formats(context)
        removeable_report_format_keys = report_formats.keys() - self.default_report_formats.keys()
        format_list = "\n".join([f"{i+1}. {format_name}" for i, format_name in enumerate(removeable_report_format_keys)])
        if len(removeable_report_format_keys) == 0:
            format_list = "(–Ω–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)"
        await chat.send_message_to_query(f"‚öôÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n{format_list}")
        return chat.stay_on_state(context)
    
    async def select_report_format_to_remove(self, message: dict, context: dict, chat: ChatInterface):
        report_formats: dict = self.get_report_formats(context)
        removeable_report_format_keys = report_formats.keys() - self.default_report_formats.keys()

        format_id = int(re.findall(r"\d+", message["text"])[0]) - 1
        format_names = list(removeable_report_format_keys)

        if format_id < 0 or format_id >= len(format_names):
            return await self.wrong_select_format_to_remove_messsage(message, context, chat)
        
        format_name = format_names[format_id]
        del report_formats[format_name]

        await chat.send_message_to_query(f'–§–æ—Ä–º–∞—Ç "{format_name}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω ‚úÖ')
        return await self.select_format_message(message, context, chat)
    
    async def cancel_remove_format_command(self, message: dict, context: dict, chat: ChatInterface):
        await chat.send_message_to_query(f'üîñ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        return await self.select_format_message(message, context, chat)

    def get_conversation_states(self) -> Dict[str, MessageHandler]:
        states = super().get_conversation_states()
        states.update({
            self.waiting_format_state: [
                MessageHandler(self.filter_factory.create_filter("command", dict(command="add_format")), self.response_format_name_command),
                MessageHandler(self.filter_factory.create_filter("command", dict(command="remove_format")), self.response_remove_format_name_command),
                MessageHandler(self.filter_factory.create_filter("regex", dict(pattern=r"\d+")), self.select_report_format),
                MessageHandler(self.filter_factory.create_filter("all"), self.wrong_select_format_messsage)
            ],
            self.waiting_format_name_state: [
                MessageHandler(self.filter_factory.create_filter("text"), self.response_format_text_command),
                MessageHandler(self.filter_factory.create_filter("all"), self.wrong_format_name_message)
            ],
            self.waiting_format_text_state: [
                MessageHandler(self.filter_factory.create_filter("text"), self.add_format_command),
                MessageHandler(self.filter_factory.create_filter("all"), self.wrong_format_text_message)
            ],
            self.waiting_remove_format_state: [
                MessageHandler(self.filter_factory.create_filter("regex", dict(pattern=r"\d+")), self.select_report_format_to_remove),
                MessageHandler(self.filter_factory.create_filter("command", dict(command="cancel")), self.cancel_remove_format_command),
                MessageHandler(self.filter_factory.create_filter("all"), self.wrong_select_format_to_remove_messsage)
            ]
        })

        return states