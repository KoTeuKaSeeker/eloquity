from typing import Dict
from src.commands.llm_command import LLMCommand
from src.AI.llm.llm_interface import LLMInterface
from src.chat_api.message_filters.interfaces.message_filter_factory_interface import MessageFilterFactoryInterface
from src.chat_api.message_handler import MessageHandler
from src.chat_api.chat.chat_interface import ChatInterface
from src.transcribers.transcriber_interface import TranscriberInterface
from src.chat_api.file_containers.file_container_interface import FileContainerInterface
from src.drop_box_manager import DropBoxManager
from src.commands.audio_loaders.dropbox_audio_loader import DropboxAudioLoader
from src.chat_api.file_containers.path_file_container import PathFileContainer
from typing import List
import os
import uuid

class TranscibeLLMCommand(LLMCommand):
    transcriber: TranscriberInterface
    temp_path: str

    def __init__(self, model: LLMInterface, filter_factory: MessageFilterFactoryInterface, transcriber: TranscriberInterface, temp_path: str,  entry_point_state: str, dropbox_manager: DropBoxManager):
        super().__init__(model, filter_factory)
        self.dropbox_loader = DropboxAudioLoader(dropbox_manager)
        self.transcriber = transcriber
        self.temp_path = temp_path
        self.transcribe_state = entry_point_state
        self.chatting_state = "transcribe_llm_command.chatting_state"
        self.active_keyboard = None
    
    async def transcirbe_audio(self, message: dict, context: dict, chat: ChatInterface):

        if "messages_history" not in context["chat_data"]:
            context["chat_data"]["messages_history"] = [{"role": "system", "content": self.system_prompt}]
        messages_history: List[dict] = context["chat_data"]["messages_history"]

        audio_container: FileContainerInterface = message["audio_container"]
        file_path = await audio_container.get_file_path()

        transcribe_result = self.transcriber.transcript_audio(file_path)
        transcription = "\n".join(f"speaker_{segment.speaker_id}: {segment.text}" for segment in transcribe_result.segments)

#         transcription = """–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ 8 –ª–µ—Ç. –ù–∞—á–∏–Ω–∞–ª —Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤—Ä–æ–¥–µ Pandas –∏ Scikit-learn –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π. –í –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —è —Ñ–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ LLM –º–æ–¥–µ–ª–µ–π. –†–∞–±–æ—Ç–∞–ª —Å —Ç–∞–∫–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –∫–∞–∫ TensorFlow –∏ PyTorch, –∞ —Ç–∞–∫–∂–µ —Å –∫—Ä—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏, –ø–æ–¥–æ–±–Ω—ã–º–∏ GPT.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –û—Ç–ª–∏—á–Ω–æ. –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å LLM –º–æ–¥–µ–ª—è–º–∏?

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –ö–æ–Ω–µ—á–Ω–æ. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–ª–∞—Å—å –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–¥—Ö–æ–¥—ã –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç. –Ø —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏, –∞ —Ç–∞–∫–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –≠—Ç–æ –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ?

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –ú—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ TensorFlow –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á —è —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–ª PyTorch, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–∞–µ—Ç –±–æ–ª—å—à–µ –≥–∏–±–∫–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ª–æ–µ–≤. –¢–∞–∫–∂–µ —è –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–ª —Å CUDA –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–∞–∫ Dask –∏ Apache Spark. –í –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–º–µ–Ω—è–ª–∏ Kubernetes –∏ Docker.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ö–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏ –≤ —á–µ–º –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ?

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∫—Ä—É–ø–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ GPT, –∏ —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è. –Ø –ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–Ω–∫–æ—Å—Ç—è—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π –∏ —É–ª—É—á—à–∞—Ç—å –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û–¥–Ω–∞–∫–æ —Ç–∞–∫–∂–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–æ—ç—Ç–æ–º—É —è —É–¥–µ–ª—è—é –º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è DevOps –ø—Ä–∞–∫—Ç–∏–∫–∞–º.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ü–æ–Ω—è–ª. –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ —Ç–∞–∫–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö?

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –í –º–æ–µ–º –æ–ø—ã—Ç–µ —è —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –≤ –º—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö. –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —è –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–≤–ª—é —á–µ—Ç–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é –≥–∏–±–∫–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Agile. –í–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–≤—è–∑—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, —á—Ç–æ–±—ã –≤—Å–µ —à–∞–≥–∏ –±—ã–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã. –Ø —Ç–∞–∫–∂–µ —É–¥–µ–ª—è—é –≤–Ω–∏–º–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ó–≤—É—á–∏—Ç, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –ø–æ–¥—Ö–æ–¥. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –±—É–¥—É—â–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è?

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ LLM –∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –±–∞–∑–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∏ –≤—Å–µ –±–æ–ª—å—à–µ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞—á–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á. –¢–∞–∫–∂–µ –≤–∏–∂—É –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∫–∞–∫ reinforcement learning, –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –í –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –≤–∞–∂–Ω—ã –µ—â–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∏—Ö –º–µ–Ω–µ–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–º–∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏.

# –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∏ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è.

# –ö–∞–Ω–¥–∏–¥–∞—Ç: –°–ø–∞—Å–∏–±–æ –≤–∞–º. –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è."""
        
        transcription_name = str(uuid.uuid4())
        transcription_path = os.path.join(self.temp_path, transcription_name)
        with open(transcription_path, "w", encoding="utf-8") as file:
            file.write(transcription)

        await chat.send_message_to_query("üöÄ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        await chat.send_file_to_query(transcription_path)

        # context["chat_data"]["model_context"] = transcription

        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–Ω—Ç–µ—Ä—å–≤—å—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–µ–π—á–∞—Å - –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø–∏—Ü–∏—é –∏ —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 
        —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø–∏—Ü–∏–µ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞–Ω–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ 
        –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç–≤–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É —á–µ–∫ –ª–∏—Å—Ç—É.

        –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–∞—Ü–∏—è:

        {transcription}
        """

        user_message = {"role": "user", "content": prompt}
        

        context["chat_data"]["messages_history"].append(user_message)

        return await self.after_transcribe_message(message, context, chat)
    
    async def after_transcribe_message(self, message: dict, context: dict, chat: ChatInterface):
        await chat.send_message_to_query("‚èÆÔ∏è –°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É —Å –±–æ—Ç–æ–º - –æ–Ω –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏.")
        return chat.move_next(context, self.chatting_state)

    async def waiting_audio_message(self, message: dict, context: dict, chat: ChatInterface):
        message = "‚èÆÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
        if self.active_keyboard is not None:
            await chat.send_keyboad(message, self.active_keyboard)
        else:
            self.active_keyboard = [["–°–æ–∑–¥–∞—Ç—å dropbox —Å—Å—ã–ª–∫—É"]]
            await chat.send_keyboad(message, self.active_keyboard)
        return chat.stay_on_state(context)
    
    async def create_dropbox_link(self, message: dict, context: dict, chat: ChatInterface):
        dropbox_url = self.dropbox_loader.dropbox_manager.open_drop_box_file_request(context)
        
        self.active_keyboard = [["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ dropbox", "–°–æ–∑–¥–∞—Ç—å dropbox —Å—Å—ã–ª–∫—É"]]
        await chat.send_keyboad(f"‚ú® –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ dropbox:\n{dropbox_url}", self.active_keyboard)
        
        return chat.stay_on_state(context)

    async def from_dropbox_handler(self, message: dict, context: dict, chat: ChatInterface):
        audio_path = await self.dropbox_loader.load_audio(message, context, chat)
        if audio_path is None:
            return chat.stay_on_state(context)
        file_container = PathFileContainer(audio_path)
        message["audio_container"] = file_container

        await chat.send_message_to_query("üß® –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ dropbox.")

        return await self.transcirbe_audio(message, context, chat)

    def get_conversation_states(self) -> Dict[str, MessageHandler]:
        states = super().get_conversation_states()
        
        audio_trancribe_states = [
            MessageHandler(self.filter_factory.create_filter("audio"), self.transcirbe_audio),
            MessageHandler(self.filter_factory.create_filter("voice"), self.transcirbe_audio),
            MessageHandler(self.filter_factory.create_filter("video"), self.transcirbe_audio),
            MessageHandler(self.filter_factory.create_filter("all"), self.waiting_audio_message)
        ]

        dropbox_states = [
                MessageHandler(self.filter_factory.create_filter("equal", dict(messages=["–°–æ–∑–¥–∞—Ç—å dropbox —Å—Å—ã–ª–∫—É", "1"])), self.create_dropbox_link),
                MessageHandler(self.filter_factory.create_filter("equal", dict(messages=["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ dropbox", "2"])), self.from_dropbox_handler)
            ]

        states[self.transcribe_state] = dropbox_states + audio_trancribe_states
        states[self.chatting_state] = dropbox_states + states[self.chatting_state] + audio_trancribe_states

        return states